"""tabelas iniciais

Revision ID: 913a0314e9b8
Revises: 
Create Date: 2025-07-02 14:59:18.414035

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '913a0314e9b8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('geomaps',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_geomaps_id'), 'geomaps', ['id'], unique=False)
    op.create_table('profiles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fullName', sa.String(), nullable=False),
    sa.Column('cpf', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('max_apiaries', sa.Integer(), nullable=False),
    sa.Column('max_meliponaries', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cpf'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('apiaries',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('latitude', sa.String(), nullable=False),
    sa.Column('longitude', sa.String(), nullable=False),
    sa.Column('tipoInstalacao', sa.String(), nullable=False),
    sa.Column('tempoItinerante', sa.String(), nullable=True),
    sa.Column('quantidadeColmeias', sa.String(), nullable=False),
    sa.Column('outrosApiariosRaio3km', sa.Boolean(), nullable=False),
    sa.Column('qtdColmeiasOutrosApiarios', sa.String(), nullable=True),
    sa.Column('fontesNectarPolen', sa.Boolean(), nullable=False),
    sa.Column('disponibilidadeAgua', sa.Boolean(), nullable=False),
    sa.Column('sombreamentoNatural', sa.Boolean(), nullable=False),
    sa.Column('protecaoVentosFortes', sa.Boolean(), nullable=False),
    sa.Column('distanciaSeguraContaminacao', sa.Boolean(), nullable=False),
    sa.Column('distanciaMinimaConstrucoes', sa.Boolean(), nullable=False),
    sa.Column('distanciaSeguraLavouras', sa.Boolean(), nullable=False),
    sa.Column('acessoVeiculos', sa.Boolean(), nullable=False),
    sa.Column('capacidadeDeSuporte', sa.String(), nullable=True),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_apiaries_id'), 'apiaries', ['id'], unique=False)
    op.create_table('logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meliponaries',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('latitude', sa.String(), nullable=False),
    sa.Column('longitude', sa.String(), nullable=False),
    sa.Column('tipoInstalacao', sa.String(), nullable=False),
    sa.Column('especieAbelha', sa.String(), nullable=True),
    sa.Column('quantidadeColmeias', sa.String(), nullable=False),
    sa.Column('outrosMeliponariosRaio1km', sa.Boolean(), nullable=False),
    sa.Column('qtdColmeiasOutrosMeliponarios', sa.String(), nullable=True),
    sa.Column('fontesNectarPolen', sa.Boolean(), nullable=False),
    sa.Column('disponibilidadeAgua', sa.Boolean(), nullable=False),
    sa.Column('sombreamentoNatural', sa.Boolean(), nullable=False),
    sa.Column('protecaoVentosFortes', sa.Boolean(), nullable=False),
    sa.Column('distanciaSeguraContaminacao', sa.Boolean(), nullable=False),
    sa.Column('distanciaMinimaConstrucoes', sa.Boolean(), nullable=False),
    sa.Column('distanciaSeguraLavouras', sa.Boolean(), nullable=False),
    sa.Column('capacidadeDeSuporte', sa.String(), nullable=True),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meliponaries_id'), 'meliponaries', ['id'], unique=False)
    op.create_table('profile_roles',
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('profile_id', 'role_id')
    )
    op.create_table('user_profiles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'profile_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_profiles')
    op.drop_table('profile_roles')
    op.drop_index(op.f('ix_meliponaries_id'), table_name='meliponaries')
    op.drop_table('meliponaries')
    op.drop_table('logs')
    op.drop_index(op.f('ix_apiaries_id'), table_name='apiaries')
    op.drop_table('apiaries')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('roles')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_geomaps_id'), table_name='geomaps')
    op.drop_table('geomaps')
    # ### end Alembic commands ###
